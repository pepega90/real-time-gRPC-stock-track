// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: protos/stock.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	StreamStockPrice(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (StockService_StreamStockPriceClient, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) StreamStockPrice(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (StockService_StreamStockPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[0], "/StockService/StreamStockPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceStreamStockPriceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockService_StreamStockPriceClient interface {
	Recv() (*StockResponse, error)
	grpc.ClientStream
}

type stockServiceStreamStockPriceClient struct {
	grpc.ClientStream
}

func (x *stockServiceStreamStockPriceClient) Recv() (*StockResponse, error) {
	m := new(StockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	StreamStockPrice(*StockRequest, StockService_StreamStockPriceServer) error
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) StreamStockPrice(*StockRequest, StockService_StreamStockPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStockPrice not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_StreamStockPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServiceServer).StreamStockPrice(m, &stockServiceStreamStockPriceServer{stream})
}

type StockService_StreamStockPriceServer interface {
	Send(*StockResponse) error
	grpc.ServerStream
}

type stockServiceStreamStockPriceServer struct {
	grpc.ServerStream
}

func (x *stockServiceStreamStockPriceServer) Send(m *StockResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStockPrice",
			Handler:       _StockService_StreamStockPrice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/stock.proto",
}
